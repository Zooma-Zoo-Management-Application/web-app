import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

// created by chatgpt
export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

// created by chatgpt
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}

export function formatVND(n : number, currency: string = "VNĐ") {
  return n.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,').slice(0,-3) + " " + currency;
}

export function getCharPerWord(text: string) {
  if (!text) return "U";

  let matches = text.match(/\b(\w)/g); 
  let acronym = matches?.join(''); 
  return acronym;
}

export default function getScrollAnimation() {
	return ({
    offscreen: {
      y: 150,
      opacity: 0,
    },
    onscreen: ({duration = 2} = {}) =>  ({
      y: 0,
      opacity: 1,
      transition: {
      type: "spring",
      duration,
      }
    })
  })

}

export const getImageOfTicket = (ticketName: string) => {
  if(ticketName.toLowerCase().includes("child")){
    return "/icon/child.svg"
  } else if(ticketName.toLowerCase().includes("adult")){
    return "/icon/adult.svg"
  } else if(ticketName.toLowerCase().includes("senior")){
    return "/icon/senior.svg"
  } else {
    return "/icon/child.svg"
  }
}

export const getImageOfTicketById = (ticketId: number) => {
  if(ticketId === 1){
    return "/icon/child.svg"
  } else if(ticketId === 2){
    return "/icon/adult.svg"
  } else if(ticketId === 3){
    return "/icon/senior.svg"
  } else {
    return "/icon/child.svg"
  }
}

export const getStatus = (status: number) => {
  switch (status) {
    case 0:
      return {
        text: "Unsuccessful",
        color: "bg-red-100 text-red-800",
        ring: "ring-red-400 bg-red-400"
      }
    case 1:
      return {
        text: "Pending",
        color: "bg-yellow-100 text-yellow-800",
        ring: "ring-yellow-400 bg-yellow-400"
      }
    case 2:
      return {
        text: "Successful",
        color: "bg-green-100 text-green-800",
        ring: "ring-green-400 bg-green-400"
      }
    case 3:
      return {
        text: "Refunded",
        color: "bg-gray-100 text-gray-800",
        ring: "ring-gray-400 bg-gray-400"
      }
    default:
      return {
        text: "Unknown",
        color: "bg-black-100 text-black-800",
        ring: "ring-black-400 bg-black-400"
      }
  }
}